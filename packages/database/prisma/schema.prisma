generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider                         = "zod-prisma-types"
    output                           = "../src/zod"
    useMultipleFiles                 = false
    createInputTypes                 = false
    createModelTypes                 = true
    addInputTypeValidation           = false
    createOptionalDefaultValuesTypes = true
}

generator json {
    provider = "prisma-json-types-generator"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                 String    @id @default(cuid())
    name               String
    email              String    @unique
    emailVerified      Boolean   @default(false)
    image              String?
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    username           String?   @unique
    role               String?
    banned             Boolean?  @default(false)
    banReason          String?
    banExpires         DateTime?
    onboardingComplete Boolean   @default(false)
    paymentsCustomerId String?
    locale             String?

    sessions    Session[]
    accounts    Account[]
    passkeys    Passkey[]
    memberships Member[]
    invitations Invitation[]
    purchases   Purchase[]
    chats       AiChat[]
}

model Session {
    id                   String   @id @default(cuid())
    expiresAt            DateTime
    ipAddress            String?
    userAgent            String?
    userId               String
    impersonatedBy       String?
    activeOrganizationId String?
    token                String   @unique
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
    id                    String    @id @default(cuid())
    accountId             String
    providerId            String
    userId                String
    accessToken           String?
    refreshToken          String?
    idToken               String?
    expiresAt             DateTime?
    password              String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([providerId, accountId])
}

model Verification {
    id         String    @id @default(cuid())
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime? @default(now())
    updatedAt  DateTime? @updatedAt

    @@unique([identifier, value])
}

model Passkey {
    id           String    @id @default(cuid())
    name         String?
    publicKey    String
    userId       String
    credentialID String    @unique
    counter      Int
    deviceType   String
    backedUp     Boolean
    transports   String?
    createdAt    DateTime? @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
    id                 String   @id @default(cuid())
    name               String
    slug               String?  @unique
    logo               String?
    createdAt          DateTime @default(now())
    metadata           String?
    paymentsCustomerId String?

    members     Member[]
    invitations Invitation[]
    purchases   Purchase[]
    chats       AiChat[]
}

model Member {
    id             String   @id @default(cuid())
    organizationId String
    userId         String
    role           String
    createdAt      DateTime @default(now())

    organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([organizationId, userId])
}

model Invitation {
    id             String   @id @default(cuid())
    organizationId String
    email          String
    role           String?
    status         String
    expiresAt      DateTime
    inviterId      String

    organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    inviter      User         @relation(fields: [inviterId], references: [id])

    @@unique([organizationId, email])
}

enum PurchaseType {
    SUBSCRIPTION
    ONE_TIME
}

model Purchase {
    id             String       @id @default(cuid())
    type           PurchaseType @default(SUBSCRIPTION)
    organizationId String?
    userId         String?
    customerId     String
    subscriptionId String?
    productId      String
    status         String?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    organization Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
    user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model AiChat {
    id             String   @id @default(cuid())
    organizationId String?
    userId         String?
    title          String?
    messages       Json?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    organization Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
    user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
}
